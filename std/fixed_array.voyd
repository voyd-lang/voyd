use std::macros::all
use optional::all
use iter::all

pub fn new_fixed_array<T>(size: i32) -> FixedArray<T>
  binaryen_gc_call(
    arrayNew,
    `(bin_type_to_heap_type(FixedArray<T>), size),
    FixedArray<T>
  )

pub fn get<T>(arr: FixedArray<T>, index: i32) -> T
  binaryen_gc_call(
    arrayGet,
    `(arr, index, BnrType<T>, BnrConst(false)),
    T
  )

pub fn set<T>(arr: FixedArray<T>, index: i32, value: T) -> FixedArray<T>
  binaryen_gc_call(arraySet, `(arr, index, value), FixedArray<T>)
  arr

pub fn copy<T>(dest_array: FixedArray<T>, opts: {
  from: FixedArray<T>,
  to_index: i32,
  from_index: i32,
  count: i32
}) -> FixedArray<T>
  binaryen_gc_call(arrayCopy, `(
    dest_array,
    opts.to_index,
    opts.from,
    opts.from_index,
    opts.count
  ), FixedArray<T>)
  dest_array

pub fn length<T>(arr: FixedArray<T>) -> i32
  binaryen_gc_call(arrayLen, `(arr), i32)

obj FixedArrayIterator<T> {
  index: i32,
  array: FixedArray<T>
}

impl<T> Iterator<T> for FixedArrayIterator<T>
  fn next(self) -> Optional<T>
    if self.index >= self.array.length<T>() then:
      None {}
    else:
      let value = self.array.get<T>(self.index)
      self.index = self.index + 1
      Some<T> { value: value }

impl<T> Iterable<T> for FixedArray<T>
  fn iterate(self) -> Iterator<T>
    FixedArrayIterator<T> { index: 0, array: self }
