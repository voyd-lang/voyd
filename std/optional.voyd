use macros::all
use operators::all

pub obj Some<T> {
  value: T
}

pub obj None {}

pub type Optional<T> = Some<T> | None
pub type Option<T> = Optional<T>

pub fn some<T>(v: T) -> Some<T>
  Some { value: v }

pub fn none() -> None
  None {}

// Convenience function overloads for lifting values when method resolution is not available
pub fn lift<T>(v: T) -> Optional<T>
  some(v)

pub fn lift<T>(v: Optional<T>) -> Optional<T>
  v

// Optional chaining operator macro: l?.r
// Expands to: if __opc := l.lift() then: __opc.r.lift() else: none()
pub macro '?.'(l, r)
  ` if
    (:= __opc $l)
    (: then (lift (member-access __opc $r)))
    (: else (none))

// Helper to chain over Optional values
pub fn opt_chain<T, O>(opt: Optional<T>, f: (v: T) -> Optional<O>) -> Optional<O>
  match(opt)
    Some:
      f(opt.value)
    None:
      none()
