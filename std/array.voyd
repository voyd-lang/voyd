use fixed_array::all
use macros::all
use operators::all
use optional::all
use iter::all

pub obj Array<T> {
  storage: FixedArray<T>,
  count: i32
}

obj ArrayIterator<T> {
  index: i32,
  array: Array<T>
}

impl<T> Iterable<T> for Array<T>
  fn iterate(self) -> Iterator<T>
    ArrayIterator<T> { index: 0, array: self }

pub fn new_array<T>({ with_size: i32 }) -> Array<T>
  Array<T> {
    storage: new_fixed_array<T>(with_size),
    count: 0
  }

pub fn new_array<T>(opts: { from: FixedArray<T> }) -> Array<T>
  Array<T> { storage: opts.from, count: opts.from.length<T>() }

impl<T> Array<T>
  fn resize(&self) -> Array<T>
    let new_storage = new_fixed_array<T>(self.storage.length<T>() * 2)
    new_storage.copy<T>({
      from: self.storage,
      to_index: 0,
      from_index: 0,
      count: self.storage.length<T>()
    })
    self.storage = new_storage
    self

  pub fn get(self, index: i32) -> Optional<T>
    let computed_index = compute_index(index, self.count)
    if computed_index >= self.count then:
      None {}
    else:
      Some<T> { value: self.storage.get<T>(index) }

  // This is unsafe at the moment
  pub fn set(self, index: i32, value: T) -> Array<T>
    let computed_index = compute_index(index, self.count)
    if computed_index >= self.storage.length<T>() then:
      self
    else:
      self.storage.set<T>(index, value)
      self

  pub fn length(self) -> i32
    self.count

  pub fn push(&self, value: T) -> Array<T>
    if self.count >= self.storage.length<T>() then:
      self.resize().push(value)
    else:
      self.set(self.count, value)
      self.count = self.count + 1
      self

  pub fn pop(&self) -> Optional<T>
    if self.count == 0 then:
      None {}
    else:
      let value = self.get(self.count - 1)
      match(value)
        Some<T>:
          self.count = self.count - 1
          Some<T> { value: value.value }
        None:
          None {}

  pub fn remove(self, index: i32) -> Array<T>
    let computed_index = compute_index(index, self.count)
    if computed_index >= self.count then:
      self
    else:
      let new_length = self.count - 1
      let new_storage = new_fixed_array<T>(new_length)

      new_storage.copy<T>({
        from: self.storage,
        to_index: 0,
        from_index: 0,
        count: computed_index
      })

      new_storage.copy<T>({
        from: self.storage,
        to_index: computed_index,
        from_index: computed_index + 1,
        count: new_length - computed_index
      })

      Array<T> { storage: new_storage, count: new_length }

  pub fn insert(&self, index: i32, value: T) -> Array<T>
    let computed_index = compute_index(index, self.count)
    if computed_index >= self.count then:
      self.push(value)
    else:
      let new_length = self.count + 1
      let new_storage = new_fixed_array<T>(new_length)

      new_storage.copy<T>({
        from: self.storage,
        to_index: 0,
        from_index: 0,
        count: computed_index
      })

      new_storage.set<T>(computed_index, value)

      new_storage.copy<T>({
        from: self.storage,
        to_index: computed_index + 1,
        from_index: computed_index,
        count: new_length - computed_index
      })

      Array<T> { storage: new_storage, count: new_length }

  pub fn slice(self, start: i32, end: i32) -> Array<T>
    let computed_start = compute_index(start, self.count)
    let computed_end = compute_index(end, self.count)

    if
      (computed_start >= self.count) or
      (computed_end >= self.count) or
      (computed_start >= computed_end)
    then:
      Array<T> { storage: new_fixed_array<T>(4), count: 0 }
    else:
      let new_length = computed_end - computed_start
      let new_storage = new_fixed_array<T>(new_length)
      new_storage.copy<T>({
        from: self.storage,
        to_index: 0,
        from_index: start,
        count: new_length
      })
      Array<T> { storage: new_storage, count: new_length }

  pub fn splice(self, start: i32, delete_count: i32, items: Array<T>) -> Array<T>
    let computed_start = compute_index(start, self.count)
    let computed_delete_count = delete_count
    let computed_end = computed_start + computed_delete_count

    if
      (computed_start >= self.count) or
      (computed_end >= self.count) or
      (computed_start >= computed_end)
    then:
      self
    else:
      let new_length = self.count - computed_delete_count + items.count
      let new_storage = new_fixed_array<T>(new_length)

      new_storage.copy<T>({
        from: self.storage,
        to_index: 0,
        from_index: 0,
        count: computed_start
      })

      new_storage.copy<T>({
        from: items.storage,
        to_index: computed_start,
        from_index: 0,
        count: items.count
      })

      new_storage.copy<T>({
        from: self.storage,
        to_index: computed_start + items.count,
        from_index: computed_end,
        count: self.count - computed_end
      })

      Array<T> { storage: new_storage, count: new_length }

  // Functional helpers as Array methods
  pub fn each(self, f: (v: T) -> void) -> void
    let iterator = self.iterate()
    while true do:
      iterator.next().match(item)
        Some<T>:
          f(item.value)
          void
        None:
          break

  pub fn filter(self, pred: (v: T) -> bool) -> Array<T>
    let iterator = self.iterate()
    let &acc = new_array<T>({ with_size: 4 })

    while true do:
      iterator.next().match(item)
        Some<T>:
          if pred(item.value) then:
            acc.push(item.value)
            void
          else:
            void
        None:
          break
    acc

  pub fn map<O>(self, f: (v: T) -> O) -> Array<O>
    let iterator = self.iterate()
    let &acc = new_array<O>({ with_size: 4 })
    while true do:
      iterator.next().match(item)
        Some:
          acc.push(f(item.value))
          void
        None:
          break
    acc

  pub fn reduce<O>(self, init: O, f: (acc: O, v: T) -> O) -> O
    let iterator = self.iterate()
    var acc = init
    while true do:
      iterator.next().match(item)
        Some<T>:
          acc = f(acc, item.value)
          void
        None:
          break
    acc

  pub fn find(self, pred: (v: T) -> bool) -> Optional<T>
    let iterator = self.iterate()
    var res: Optional<T> = None {}
    while true do:
      iterator.next().match(item)
        Some<T>:
          if pred(item.value) then:
            res = Some<T> { value: item.value }
            break
        None:
          break
    res

  pub fn some(self, pred: (v: T) -> bool) -> bool
    let iterator = self.iterate()
    var found = false
    while true do:
      iterator.next().match(item)
        Some<T>:
          if pred(item.value) then:
            found = true
            break
        None:
          void
    found

  pub fn every(self, pred: (v: T) -> bool) -> bool
    let iterator = self.iterate()
    var ok = true
    while true do:
      iterator.next().match(item)
        Some<T>:
          if pred(item.value) then:
            void
          else:
            ok = false
            break
        None:
          break
    ok


fn compute_index(index: i32, length: i32) -> i32
  if index < 0 then: length + index else: index

impl<T> Iterator<T> for ArrayIterator<T>
  fn next(&self) -> Optional<T>
    if self.index >= self.array.count then:
      None {}
    else:
      let v = self.array.storage.get<T>(self.index)
      self.index = self.index + 1
      Some<T> { value: v }
