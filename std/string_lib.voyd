use macros::all
use fixed_array::all
use operators::all
use iter::all
use optional::all

fn create_string(size: i32) -> string
  binaryen_gc_call(arrayNew, `(bin_type_to_heap_type(string), size), string)

fn copy_str(dest_str: string, opts: {
  from: string,
  to_index: i32,
  from_index: i32,
  count: i32
}) -> string
  binaryen_gc_call(arrayCopy, `(
    dest_str,
    opts.to_index,
    opts.from,
    opts.from_index,
    opts.count
  ), string)
  dest_str

pub fn length(str: string) -> i32
  binaryen_gc_call(arrayLen, `(str), i32)

fn compute_index(index: i32, length: i32) -> i32
  if index < 0 then: length + index else: index

pub fn slice(str: string, start: i32, end: i32) -> string
  let computed_start = compute_index(start, str.length)
  let computed_end = compute_index(end, str.length)

  if (computed_start >= str.length) or (computed_end >= str.length) or (computed_start >= computed_end) then:
    ""
  else:
    let new_length = computed_end - computed_start
    let new_chars = create_string(new_length)
    new_chars.copy_str({
      from: str,
      to_index: 0,
      from_index: start,
      count: new_length
    })

pub fn char_code_at(str: string, index: i32) -> i32
  let computed_index = compute_index(index, str.length)

  if computed_index >= str.length then:
    -1
  else:
    binaryen_gc_call(
      arrayGet,
      `(str, computed_index, BnrType<i32>, BnrConst(false)),
      i32
    )

pub fn '+'(str: string, other: string) -> string
  let new_length = str.length + other.length
  let new_string = create_string(new_length)
  new_string.copy_str({
    from: str,
    to_index: 0,
    from_index: 0,
    count: str.length
  })
  new_string.copy_str({
    from: other,
    to_index: str.length,
    from_index: 0,
    count: other.length
  })

  new_string

obj StringIterator {
  str: string,
  index: i32
}

pub fn new_string_iterator(str: string) -> StringIterator
  StringIterator { str: str, index: 0 }

pub fn read_next_char(iterator: StringIterator) -> i32
  if iterator.index >= iterator.str.length then:
    -1
  else:
    let char = iterator.str.char_code_at(iterator.index)
    iterator.index = iterator.index + 1
    char

impl Iterator<i32> for StringIterator
  fn next(self: StringIterator) -> Optional<i32>
    if self.index >= self.str.length then:
      None {}
    else:
      let char = self.str.char_code_at(self.index)
      self.index = self.index + 1
      Some<i32> { value: char }

impl Iterable<i32> for string
  fn iterate(self) -> Iterator<i32>
    new_string_iterator(self)

pub fn '=='(a: string, b: string) -> bool
  if a.length != b.length then:
    false
  else:
    var i = 0
    var result = true
    while i < a.length do:
      if a.char_code_at(i) != b.char_code_at(i) then:
        result = false
        break
      i = i + 1
    result
