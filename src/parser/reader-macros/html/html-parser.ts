import { Bool } from "../../../syntax-objects/bool.js";
import { Expr } from "../../../syntax-objects/expr.js";
import { Call } from "../../../syntax-objects/call.js";
import { Identifier } from "../../../syntax-objects/identifier.js";
import { List } from "../../../syntax-objects/list.js";
import { makeString } from "../../../syntax-objects/lib/make-string.js";
import { CharStream } from "../../char-stream.js";

/**
 * NOTE: This file was partially generated by AI (GPT-4o).
 */

type ParseOptions = {
  onUnescapedCurlyBrace: (stream: CharStream) => Expr | undefined;
};

export class HTMLParser {
  private stream: CharStream;
  private options: ParseOptions;

  constructor(stream: CharStream, options: ParseOptions) {
    this.stream = stream;
    this.options = options;
  }

  parse(startElement?: string): Expr {
    const node = this.parseNode(startElement);
    if (!node) throw new Error("Expected HTML node");
    return node;
  }

  private parseNode(startElement?: string): Expr | null {
    if (startElement) {
      return this.parseElement(startElement);
    }

    this.consumeWhitespace();
    if (this.stream.next === "<") {
      return this.parseElement();
    } else {
      return this.parseText();
    }
  }

  private parseElement(startElement?: string): Expr | null {
    if (!startElement && this.stream.consumeChar() !== "<") return null;

    const tagName = startElement ?? this.parseTagName();
    const attributes = this.parseAttributes();
    const selfClosing = this.stream.next === "/";

    if (selfClosing) {
      this.stream.consumeChar(); // Consume '/'
    }

    if (this.stream.consumeChar() !== ">") {
      throw new Error("Malformed tag");
    }

    // Build positional call: create_element("div", [(k, v), ...], [...])
    const nameExpr = makeString(tagName);
    const children = selfClosing ? arrayLiteral([]) : this.parseChildren(tagName);
    return new Call({
      location: this.stream.currentSourceLocation(),
      fnName: Identifier.from("create_element"),
      args: new List({ value: [nameExpr, attributes, children] }),
    });
  }

  private parseTagName(): string {
    let tagName = "";
    while (/[a-zA-Z0-9]/.test(this.stream.next)) {
      tagName += this.stream.consumeChar();
    }
    return tagName;
  }

  private parseAttributes(): List {
    // Attributes: Array<(String, String)> represented as array-literal of tuple-literals
    const items: Expr[] = [];
    while (this.stream.next !== ">" && this.stream.next !== "/") {
      this.consumeWhitespace();
      const name = this.parseAttributeName();
      if (!name) break;
      if (this.stream.next === "=") {
        this.stream.consumeChar(); // Consume '='
        const value = this.parseAttributeValue();
        items.push(tuple(makeString(name), value));
      } else {
        // Boolean attribute -> "true" string
        items.push(tuple(makeString(name), makeString("true")));
      }
      this.consumeWhitespace();
    }

    return arrayLiteral(items);
  }

  private parseAttributeName(): string {
    let name = "";
    while (/[a-zA-Z0-9-]/.test(this.stream.next)) {
      name += this.stream.consumeChar();
    }
    return name;
  }

  private parseAttributeValue(): Expr {
    const quote = this.stream.next;
    if (quote === "{") {
      const expr = this.options.onUnescapedCurlyBrace(this.stream);

      if (!expr) {
        throw new Error(
          "Unescaped curly brace must be followed by an expression"
        );
      }

      return expr;
    }

    if (quote !== '"' && quote !== "'") {
      throw new Error("Attribute value must be quoted");
    }

    this.stream.consumeChar(); // Consume the opening quote

    let text = "";
    while (this.stream.next !== quote) {
      text += this.stream.consumeChar();
    }
    this.stream.consumeChar(); // Consume the closing quote
    return makeString(text);
  }

  private parseChildren(tagName: string): List {
    this.consumeWhitespace();
    const children: Expr[] = [];
    while (
      this.stream.hasCharacters &&
      !(this.stream.at(0) === `<` && this.stream.at(1) === `/`)
    ) {
      if (this.stream.next === "{") {
        const expr = this.options.onUnescapedCurlyBrace(this.stream);
        if (expr) children.push(expr);
        this.consumeWhitespace();
        continue;
      }

      const node = this.parseNode();
      if (node) {
        // Flatten text-array nodes
        if (node.isList() && (node as List).calls("array")) {
          const arr = node as List;
          arr.sliceAsArray(1).forEach((e) => children.push(e));
        } else {
          children.push(node);
        }
      }

      this.consumeWhitespace();
    }

    if (this.stream.hasCharacters && this.stream.next === `<`) {
      this.stream.consumeChar(); // Consume '<'
      if (this.stream.consumeChar() !== "/") {
        throw new Error(`Expected closing tag </${tagName}>`);
      }
      const closingTagName = this.parseTagName();
      if (closingTagName !== tagName) {
        throw new Error(
          `Mismatched closing tag, expected </${tagName}> but got </${closingTagName}>`
        );
      }
      if (this.stream.consumeChar() !== ">") {
        throw new Error("Malformed closing tag");
      }
    }

    return arrayLiteral(children);
  }

  private parseText(): Expr {
    const node = array();
    node.location = this.stream.currentSourceLocation();

    let text = "";
    while (this.stream.hasCharacters && this.stream.next !== "<") {
      if (this.stream.next === "{") {
        const trimmed = text.trim();
        if (trimmed) node.push(makeString(trimmed));
        text = "";
        const expr = this.options.onUnescapedCurlyBrace(this.stream);
        if (expr) node.push(expr);
        continue;
      }

      text += this.stream.consumeChar();
    }

    const trimmed = text.trim();
    if (trimmed) node.push(makeString(trimmed));
    node.location.endColumn = this.stream.column;
    node.location.endIndex = this.stream.position;
    return node;
  }

  private consumeWhitespace(): void {
    while (/\s/.test(this.stream.next)) {
      this.stream.consumeChar();
    }
  }
}

// Helpers
const array = () => new List({}).insert("array");
const arrayLiteral = (items: Expr[]) => {
  // Build array literal in the same shape the array literal reader macro
  // eventually expects, but omit the comma placeholder since initArrayLiteral
  // slices past the head label anyway.
  const arr = new List({ value: ["array", ...items] });
  arr.setAttribute("array-literal", true);
  return arr;
};
const tuple = (a: Expr, b: Expr) => new List({ value: ["tuple", a, b] });
